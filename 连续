import numpy as np                                        # 导入numpy库，命名为np
import matplotlib.pyplot as plt                           # 导入matplotlib.pyplot库，并命名plt（自带工具）
from matplotlib import animation                          # 动画
x= np.linspace(-4, 4, 1000)                               #（-4，4）分成1000个点
x1 = np.linspace(-17, -7, 1000)                           #（-17,-7）分成1000个点
x_data, y_data = [], []


def init():                                               # 定义init的function
    y3 = x1/x1                                            # 定义方波
    y3[0] = 0
    y3[-1] = 0
    line.set_ydata(y3)
    line.set_xdata(x1)                                    # 起始值
    return line,


def animate(i):                                           # 定义animate的function，第i帧第i个时间点
    n = 0                                                 
    x3 = np.linspace(-17 + i, -7 + i, 1000,)              #移动方波
    y2 = x1 / x1                                          #定义移动的方波
    y2[0] = 0
    y2[-1] = 0
    line.set_ydata(y2)
    line.set_xdata(x3)
    if i < 3:                                             #没有发生重叠时
        global x_data, y_data
        x_data, y_data = [], []
        line1, = ax1.plot(x_data, y_data)
    if  i >= 3 and i <= 11:                               #开始发生重叠
        x_data.append(i)
        y_data.append(( i-3))
        line1, = ax1.plot(x_data, y_data)
        return line, line1,
    elif i >= 11 and i < 13:                              #重叠面积最大直至不变
        x_data.append(i)
        y_data.append(8)
        line1, = ax1.plot(x_data, y_data)
        return line, line1,
    elif i >= 13:                                         #重叠面积逐渐减小
        x_data.append(i)
        y_data.append(-i+21)
        line1, = ax1.plot(x_data, y_data)
        return line, line1,

    return line,


fig, ax1 = plt.subplots()                                         #画到一个平面上
ax = plt.gca()                                                   
ax.spines['right'].set_color('none')                              #右边框删除
ax.spines['top'].set_color('none')                                #上边框删除
ax.xaxis.set_ticks_position('bottom')                             #下边框设置为x轴
ax.yaxis.set_ticks_position('left')                               #左边框设置为y轴
ax.spines['bottom'].set_position(('data', 0))                     #设置坐标轴位置
ax.spines['left'].set_position(('data', 0))
y = 2*x/x                                                         #定义方波
y[0] = 0
y[-1] = 0
ax1.plot(x,y,'k--',lw=2.0 ,)                                      #x1为宽度为2的黑色虚线
ax1.set_xlim((-20, 25))                                           #定义范围
ax1.set_ylim((0, 10))
ax1.set_title("Convolution signal process Made by Fairy Meng")    #标题
y1 = x1 / x1
y1[0] = 0
y1[-1] = 0
line, = ax1.plot(x1, y1)
ani = animation.FuncAnimation(init_func=init, frames=30, interval=105, blit=True, func=animate, fig=fig)
#调用FuncAnimation函数生成动画。参数说明：
#fig 进行动画绘制的figure
#func 自定义动画函数，即传入刚定义的函数animate
#frames 动画长度，一次循环包含的帧数
#init_func 自定义开始帧，即传入刚定义的函数init
#interval 更新频率，以ms计
#blit 选择更新所有点，还是仅更新产生变化的点   
plt.show()
